@model KronoMata.Web.Models.DashboardViewModel 

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-3 col-6">
            <!-- small card -->
            <div class="small-box bg-info shadow-sm">
                <div class="inner">
                    <h3>@Model.Hosts.Count</h3>

                    <p>Hosts</p>
                </div>
                <div class="icon">
                    <i class="fas fa-server"></i>
                </div>
                <a href="#" class="small-box-footer">
                    More info <i class="fas fa-arrow-circle-right"></i>
                </a>
            </div>
        </div>
        <div class="col-lg-3 col-6">
            <!-- small card -->
            <div class="small-box bg-info shadow-sm">
                <div class="inner">
                    <h3>@Model.Plugins.Count</h3>

                    <p>Plugins</p>
                </div>
                <div class="icon">
                    <i class="fas fa-plug"></i>
                </div>
                <a href="#" class="small-box-footer">
                    More info <i class="fas fa-arrow-circle-right"></i>
                </a>
            </div>
        </div>
        <div class="col-lg-3 col-6">
            <!-- small card -->
            <div class="small-box bg-info shadow-sm">
                <div class="inner">
                    <h3>@Model.ScheduledJobs.Count</h3>

                    <p>Scheduled Jobs</p>
                </div>
                <div class="icon">
                    <i class="fas fa-stopwatch"></i>
                </div>
                <a href="#" class="small-box-footer">
                    More info <i class="fas fa-arrow-circle-right"></i>
                </a>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h3 class="card-title">Last 7 Day Summary</h3>
                </div>
                <div class="card-body">
                    <div class="chart">
                        <!-- TODO: move styling to a reusable place -->
                        <canvas id="jobHistoryChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h3 class="card-title">Last 7 Day Detail</h3>
                </div>
                <div class="card-body">
                    <div id="history-grid"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section styles
{
    <link rel="stylesheet" href="~/plugins/jsgrid/jsgrid.min.css">
    <link rel="stylesheet" href="~/plugins/jsgrid/jsgrid-theme.min.css">
}

@section scripts 
{
    <script src="~/plugins/chart.js/Chart.min.js"></script>
    <script src="~/plugins/jsgrid/jsgrid.min.js"></script>

    <script type="text/javascript">

        function GetData(url) {
            var resp = [];
            $.ajax({
                type: "GET",
                url: url,
                async: false,
                contentType: "application/json",
                success: function (data) {
                    resp.push(data);
                },
                error: function (req, status, error) {
                    // TODO: do something with error
                    alert("error");
                }
            });
            return resp;
        }

        $(function() {
            populateJobHistorySummary();
            populateJobHistoryDetail();
        });

        function populateJobHistorySummary() {
            var ctx = $('#jobHistoryChart').get(0).getContext('2d')
            var data = GetData('@Url.Action("GetLastJobHistorySummary", "ChartData")')[0];
            var labels = data.labels;

            var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: []
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    legend: {
                        display: true
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: false,
                                fontColor: "#77778e",
                                callback: function (label, index, labels) {
                                    return label;
                                }
                            },
                            gridLines: {
                                color: 'rgba(119, 119, 142, 0.2)'
                            }
                        }],
                        xAxes: [{
                            ticks: {
                                display: true,
                                fontColor: "#77778e"
                            },
                            gridLines: {
                                display: true,
                                color: 'rgba(119, 119, 142, 0.2)'
                            }
                        }]
                    },
                    legend: {
                        labels: {
                            fontColor: "#77778e"
                        },
                    },
                }
            });

            for (series in data.seriesList) {
                var color = '#28a745';
                var border = '#28a745';
                var seriesName = data.seriesList[series].name;

                switch (seriesName) {
                    case 'Failure':
                        color = 'rgba(255, 99, 132, 0.6)';
                        border = 'rgba(255, 99, 132, 0.2)';
                        break;
                    case 'Skipped':
                        color = 'rgba(255, 205, 86, 0.6)';
                        border = 'rgba(255, 205, 86, 0.2)';
                        break;
                    case 'Success':
                        color = 'rgba(75, 192, 192, 0.6)';
                        border = 'rgba(75, 192, 192, 0.2)';
                        break;
                }

                var dataSet = {
                    label: seriesName,
                    data: [],
                    borderWidth: 2,
                    backgroundColor: color,
                    borderColor: border,
                    borderWidth: 2.0,
                    pointBackgroundColor: '#ffffff',
                    fill: false
                }

                for (idx in data.seriesList[series].data) {
                    dataSet.data.push(data.seriesList[series].data[idx]);
                }

                myChart.config.data.datasets.push(dataSet);
            }

            myChart.update();
        }

        function populateJobHistoryDetail() {
            var db = GetData('@Url.Action("GetLastJobHistoryRelatedData", "ChartData")')[0];
            var jobs = db.data.value.jobs;
            var hosts = db.data.value.hosts;

            $('#history-grid').jsGrid({
                height: "500px",
                width: "100%",
                sorting: false,
                paging: true,
                pageLoading: true,
                pageSize: 40,
                autoload: true,

                controller: {
                    loadData: function (filter) {
                        return $.ajax({
                            cache: false,
                            type: "GET",
                            url: "@Url.Action("GetLastJobHistoryDetail", "ChartData")",
                            data: filter,
                            dataType: "json"
                        });
                    },

                    insertItem: function (item) {
                    },

                    updateItem: function (item) {
                    },

                    deleteItem: function (item) {
                    }
                },
                fields: [
                    { name: "runTime", title: "Run Time", type: "text", width: 75, 
                        itemTemplate: function(value, item) {
                            let icon = 'fa-check-circle';
                            let iconClass = 'status-icon-success';

                            switch (item.status) {
                                case 1:
                                    icon = 'fa-pause-circle';
                                    iconClass = 'status-icon-skip';
                                    break;
                                case 2:
                                    icon = 'fa-exclamation-circle';
                                    iconClass = 'status-icon-fail';
                                    break;
                            }

                            let date = new Date(value).toLocaleString('en-US');

                            return '<i class="fa ' + icon + ' ' + iconClass + '"></i>' + date;
                        }
                    },
                    { name: "scheduledJobId", title: "Job", type: "select", items: jobs, valueField: "id", textField: "name", width: 75, headercss: "text-start" },
                    { name: "hostId", title: "Host", type: "select", items: hosts, valueField: "id", textField: "machineName", width: 75 },
                    { name: "message", title: "Message", type: "text", width: 150 },
                    { name: "detail", title: "Detail", type: "text" }
                ]
            });
        }
    </script>
}